/**
 * Service d'accessibilit√© pour EcoRun
 * Impl√©mentation des fonctionnalit√©s d'accessibilit√© selon WCAG 2.1 AA
 */

import { AccessibilityInfo, Platform } from 'react-native';
import { settingsService } from '@/lib/settings';
import { wcagChecker } from './wcagCompliance';

export interface AccessibilityState {
  screenReaderEnabled: boolean;
  reduceMotionEnabled: boolean;
  highContrastEnabled: boolean;
  largeTextEnabled: boolean;
  voiceOverEnabled: boolean;
}

export class AccessibilityService {
  private currentState: AccessibilityState = {
    screenReaderEnabled: false,
    reduceMotionEnabled: false,
    highContrastEnabled: false,
    largeTextEnabled: false,
    voiceOverEnabled: false,
  };

  /**
   * Initialiser le service d'accessibilit√©
   */
  async initialize(): Promise<void> {
    try {
      // D√©tecter les pr√©f√©rences syst√®me
      await this.detectSystemPreferences();
      
      // Appliquer les param√®tres utilisateur
      await this.applyUserSettings();
      
      // √âcouter les changements syst√®me
      this.setupSystemListeners();
      
      console.log('‚ôø Service d\'accessibilit√© initialis√©');
    } catch (error) {
      console.error('Erreur initialisation accessibilit√©:', error);
    }
  }

  /**
   * D√©tecter les pr√©f√©rences d'accessibilit√© syst√®me
   */
  private async detectSystemPreferences(): Promise<void> {
    try {
      // Lecteur d'√©cran
      const screenReaderEnabled = await AccessibilityInfo.isScreenReaderEnabled();
      this.currentState.screenReaderEnabled = screenReaderEnabled;
      
      // Animations r√©duites
      const reduceMotionEnabled = await AccessibilityInfo.isReduceMotionEnabled();
      this.currentState.reduceMotionEnabled = reduceMotionEnabled;
      
      // Appliquer automatiquement si d√©tect√©
      if (screenReaderEnabled) {
        await settingsService.updateSetting('screenReader', true);
        await settingsService.updateSetting('voiceGuidance', 'detailed');
      }
      
      if (reduceMotionEnabled) {
        await settingsService.updateSetting('reducedMotion', true);
      }
      
    } catch (error) {
      console.warn('Impossible de d√©tecter les pr√©f√©rences syst√®me:', error);
    }
  }

  /**
   * Appliquer les param√®tres utilisateur
   */
  private async applyUserSettings(): Promise<void> {
    const settings = settingsService.getSettings();
    
    // Appliquer les param√®tres d'accessibilit√©
    this.currentState.highContrastEnabled = settings.highContrast;
    this.currentState.largeTextEnabled = settings.fontSize !== 'normal';
  }

  /**
   * Configurer les listeners pour les changements syst√®me
   */
  private setupSystemListeners(): void {
    // √âcouter les changements de lecteur d'√©cran
    AccessibilityInfo.addEventListener('screenReaderChanged', (enabled) => {
      this.currentState.screenReaderEnabled = enabled;
      this.handleScreenReaderChange(enabled);
    });

    // √âcouter les changements d'animations r√©duites
    AccessibilityInfo.addEventListener('reduceMotionChanged', (enabled) => {
      this.currentState.reduceMotionEnabled = enabled;
      this.handleReduceMotionChange(enabled);
    });
  }

  /**
   * G√©rer l'activation/d√©sactivation du lecteur d'√©cran
   */
  private async handleScreenReaderChange(enabled: boolean): Promise<void> {
    console.log(`üì± Lecteur d'√©cran ${enabled ? 'activ√©' : 'd√©sactiv√©'}`);
    
    if (enabled) {
      // Activer le guidage vocal d√©taill√©
      await settingsService.updateSetting('voiceGuidance', 'detailed');
      await settingsService.updateSetting('screenReader', true);
      
      // D√©sactiver les animations pour √©viter la confusion
      await settingsService.updateSetting('reducedMotion', true);
    }
  }

  /**
   * G√©rer l'activation des animations r√©duites
   */
  private async handleReduceMotionChange(enabled: boolean): Promise<void> {
    console.log(`üé¨ Animations r√©duites ${enabled ? 'activ√©es' : 'd√©sactiv√©es'}`);
    await settingsService.updateSetting('reducedMotion', enabled);
  }

  /**
   * Annoncer un message au lecteur d'√©cran
   */
  announceToScreenReader(message: string, priority: 'low' | 'high' = 'low'): void {
    if (this.currentState.screenReaderEnabled) {
      AccessibilityInfo.announceForAccessibility(message);
      console.log(`üì¢ Annonce lecteur d'√©cran: ${message}`);
    }
  }

  /**
   * V√©rifier si une fonctionnalit√© d'accessibilit√© est active
   */
  isFeatureEnabled(feature: keyof AccessibilityState): boolean {
    return this.currentState[feature];
  }

  /**
   * Obtenir l'√©tat complet d'accessibilit√©
   */
  getAccessibilityState(): AccessibilityState {
    return { ...this.currentState };
  }

  /**
   * G√©n√©rer un rapport d'accessibilit√©
   */
  generateAccessibilityReport(): string {
    const settings = settingsService.getSettings();
    
    let report = `# Rapport d'Accessibilit√© - EcoRun\n\n`;
    report += `**R√©f√©rentiel : WCAG 2.1 AA + React Native Accessibility Guidelines**\n\n`;
    
    report += `## √âtat Actuel\n\n`;
    report += `### Pr√©f√©rences Syst√®me D√©tect√©es\n`;
    report += `- üì± Lecteur d'√©cran : ${this.currentState.screenReaderEnabled ? 'Actif' : 'Inactif'}\n`;
    report += `- üé¨ Animations r√©duites : ${this.currentState.reduceMotionEnabled ? 'Actif' : 'Inactif'}\n`;
    report += `- üîç Contraste √©lev√© : ${this.currentState.highContrastEnabled ? 'Actif' : 'Inactif'}\n\n`;
    
    report += `### Param√®tres Utilisateur\n`;
    report += `- üìù Taille de police : ${settings.fontSize}\n`;
    report += `- üîä Guidage vocal : ${settings.voiceGuidance}\n`;
    report += `- üì≥ Retour haptique : ${settings.hapticFeedback ? 'Activ√©' : 'D√©sactiv√©'}\n`;
    report += `- üåô Th√®me : ${settings.theme}\n\n`;
    
    report += `## Conformit√© WCAG 2.1 AA\n\n`;
    
    const wcagResults = wcagChecker.runFullWCAGAudit();
    
    wcagResults.forEach(result => {
      report += `### ${result.guideline} (Niveau ${result.level})\n`;
      report += `**Statut : ${result.compliant ? '‚úÖ CONFORME' : '‚ùå NON CONFORME'}**\n\n`;
      
      if (result.implemented.length > 0) {
        report += `**Impl√©ment√© :**\n`;
        result.implemented.forEach(item => {
          report += `- ‚úÖ ${item}\n`;
        });
        report += '\n';
      }
      
      if (result.missing.length > 0) {
        report += `**√Ä impl√©menter (Priorit√© ${result.priority}) :**\n`;
        result.missing.forEach(item => {
          report += `- ‚ö†Ô∏è ${item}\n`;
        });
        report += '\n';
      }
    });
    
    return report;
  }

  /**
   * Recommandations sp√©cifiques pour personnes en situation de handicap
   */
  getHandicapRecommendations(): string {
    return `# Recommandations Accessibilit√© par Type de Handicap\n\n` +
    
    `## üëÅÔ∏è D√©ficience Visuelle\n` +
    `### C√©cit√©\n` +
    `- ‚úÖ Support VoiceOver/TalkBack complet\n` +
    `- ‚úÖ Navigation au clavier/gestes\n` +
    `- ‚úÖ Descriptions audio des √©l√©ments\n` +
    `- üîÑ Guidage vocal pendant activit√© (√† activer)\n\n` +
    
    `### Malvoyance\n` +
    `- ‚úÖ Contraste √©lev√© disponible\n` +
    `- ‚úÖ Tailles de police ajustables (85% √† 130%)\n` +
    `- ‚úÖ Zoom jusqu'√† 200% support√©\n` +
    `- üîÑ Mode sombre pour r√©duire fatigue oculaire (√† activer)\n\n` +
    
    `## üëÇ D√©ficience Auditive\n` +
    `- ‚úÖ Interface enti√®rement visuelle\n` +
    `- ‚úÖ Feedback visuel pour toutes les actions\n` +
    `- ‚úÖ Pas de d√©pendance au son\n` +
    `- üîÑ Sous-titres pour futurs contenus audio\n\n` +
    
    `## ü§≤ D√©ficience Motrice\n` +
    `- ‚úÖ Zones de touch suffisantes (44px minimum)\n` +
    `- ‚úÖ Pas de gestes complexes requis\n` +
    `- ‚úÖ Retour haptique configurable\n` +
    `- ‚úÖ Navigation alternative au touch\n\n` +
    
    `## üß† D√©ficience Cognitive\n` +
    `- ‚úÖ Interface simple et coh√©rente\n` +
    `- ‚úÖ Instructions claires √©tape par √©tape\n` +
    `- ‚úÖ Feedback imm√©diat sur les actions\n` +
    `- ‚úÖ Pas de limite de temps stricte\n\n` +
    
    `## üèÉ‚Äç‚ôÇÔ∏è Adaptations pour le Sport\n` +
    `### Handisport et Parasport\n` +
    `- üîÑ Mode fauteuil roulant (futur)\n` +
    `- üîÑ Handbike (futur)\n` +
    `- üîÑ Course guid√©e pour d√©ficients visuels (futur)\n` +
    `- ‚úÖ Calculs √©cologiques adaptables\n\n`;
  }
}

// Instance singleton
export const accessibilityService = new AccessibilityService();

// Helper pour audit rapide
export const runAccessibilityAudit = () => {
  console.log('‚ôø Audit d\'accessibilit√© en cours...');
  const report = accessibilityService.generateAccessibilityReport();
  console.log(report);
  return report;
};