/**
 * Service d'audit de s√©curit√© automatis√© pour EcoRun
 * Tests de s√©curit√© int√©gr√©s pour validation continue
 */

import { supabase } from '@/lib/supabase';
import { owaspChecker } from './owaspCompliance';

export interface SecurityTestResult {
  test: string;
  passed: boolean;
  details: string;
  severity: 'low' | 'medium' | 'high' | 'critical';
}

export class SecurityAuditService {
  
  /**
   * Test d'isolation des donn√©es utilisateur (RLS)
   */
  async testRowLevelSecurity(): Promise<SecurityTestResult> {
    try {
      // Tenter d'acc√©der aux donn√©es d'un autre utilisateur
      const { data, error } = await supabase
        .from('activities')
        .select('*')
        .eq('user_id', 'fake-user-id');
      
      // Si on obtient des donn√©es, c'est un probl√®me de s√©curit√©
      const passed = !data || data.length === 0;
      
      return {
        test: 'Row Level Security - Isolation des donn√©es',
        passed,
        details: passed 
          ? 'RLS fonctionne correctement - aucune donn√©e non autoris√©e accessible'
          : 'ALERTE : Donn√©es d\'autres utilisateurs accessibles',
        severity: passed ? 'low' : 'critical'
      };
    } catch (error) {
      return {
        test: 'Row Level Security - Isolation des donn√©es',
        passed: true,
        details: 'RLS bloque correctement l\'acc√®s (erreur attendue)',
        severity: 'low'
      };
    }
  }

  /**
   * Test de validation des entr√©es
   */
  async testInputValidation(): Promise<SecurityTestResult> {
    try {
      // Tenter d'injecter du code malveillant
      const maliciousInputs = [
        "'; DROP TABLE activities; --",
        "<script>alert('XSS')</script>",
        "../../etc/passwd",
        "javascript:alert('XSS')"
      ];
      
      let vulnerabilityFound = false;
      
      for (const input of maliciousInputs) {
        try {
          // Test sur le nom de profil
          const { error } = await supabase
            .from('profiles')
            .update({ name: input })
            .eq('id', 'test-id');
          
          // Si aucune erreur, v√©rifier que l'input est sanitis√©
          if (!error) {
            vulnerabilityFound = true;
            break;
          }
        } catch (e) {
          // Erreur attendue pour inputs malveillants
        }
      }
      
      return {
        test: 'Validation des entr√©es - Protection injection',
        passed: !vulnerabilityFound,
        details: vulnerabilityFound 
          ? 'ALERTE : Injection possible d√©tect√©e'
          : 'Validation des entr√©es fonctionne correctement',
        severity: vulnerabilityFound ? 'critical' : 'low'
      };
    } catch (error) {
      return {
        test: 'Validation des entr√©es - Protection injection',
        passed: true,
        details: 'Protection par d√©faut active',
        severity: 'low'
      };
    }
  }

  /**
   * Test de gestion des sessions
   */
  async testSessionSecurity(): Promise<SecurityTestResult> {
    try {
      // V√©rifier que les sessions expirent
      const { data: { session } } = await supabase.auth.getSession();
      
      if (!session) {
        return {
          test: 'S√©curit√© des sessions - Gestion des tokens',
          passed: true,
          details: 'Aucune session active - test non applicable',
          severity: 'low'
        };
      }
      
      // V√©rifier la pr√©sence d'un token valide
      const hasValidToken = session.access_token && session.refresh_token;
      
      return {
        test: 'S√©curit√© des sessions - Gestion des tokens',
        passed: hasValidToken,
        details: hasValidToken 
          ? 'Tokens JWT pr√©sents et g√©r√©s par Supabase'
          : 'ALERTE : Tokens manquants ou invalides',
        severity: hasValidToken ? 'low' : 'high'
      };
    } catch (error) {
      return {
        test: 'S√©curit√© des sessions - Gestion des tokens',
        passed: false,
        details: `Erreur lors du test de session: ${error}`,
        severity: 'medium'
      };
    }
  }

  /**
   * Test de validation des donn√©es GPS
   */
  testGPSDataValidation(): SecurityTestResult {
    try {
      // Tester avec des coordonn√©es invalides
      const invalidPositions = [
        { latitude: 200, longitude: 300, timestamp: Date.now() }, // Hors limites
        { latitude: 48.8566, longitude: 2.3522, timestamp: -1 }, // Timestamp invalide
        { latitude: NaN, longitude: Infinity, timestamp: Date.now() }, // Valeurs NaN/Infinity
      ];
      
      let validationWorks = true;
      
      invalidPositions.forEach(pos => {
        // V√©rifier que la validation d√©tecte les probl√®mes
        const isValid = this.validateGPSPosition(pos);
        if (isValid) {
          validationWorks = false;
        }
      });
      
      return {
        test: 'Validation donn√©es GPS - Int√©grit√©',
        passed: validationWorks,
        details: validationWorks 
          ? 'Validation GPS fonctionne - donn√©es invalides rejet√©es'
          : 'ALERTE : Validation GPS insuffisante',
        severity: validationWorks ? 'low' : 'medium'
      };
    } catch (error) {
      return {
        test: 'Validation donn√©es GPS - Int√©grit√©',
        passed: false,
        details: `Erreur lors du test de validation GPS: ${error}`,
        severity: 'medium'
      };
    }
  }

  /**
   * Validation d'une position GPS
   */
  private validateGPSPosition(position: any): boolean {
    // V√©rifier les coordonn√©es
    if (Math.abs(position.latitude) > 90 || Math.abs(position.longitude) > 180) {
      return false;
    }
    
    // V√©rifier le timestamp
    const now = Date.now();
    if (position.timestamp > now || position.timestamp < now - 86400000) {
      return false;
    }
    
    // V√©rifier les valeurs NaN/Infinity
    if (!isFinite(position.latitude) || !isFinite(position.longitude)) {
      return false;
    }
    
    return true;
  }

  /**
   * Ex√©cuter tous les tests de s√©curit√©
   */
  async runFullSecurityAudit(): Promise<SecurityTestResult[]> {
    console.log('üîí D√©marrage audit de s√©curit√© complet...');
    
    const results: SecurityTestResult[] = [];
    
    // Tests RLS
    results.push(await this.testRowLevelSecurity());
    
    // Tests validation
    results.push(await this.testInputValidation());
    
    // Tests sessions
    results.push(await this.testSessionSecurity());
    
    // Tests GPS
    results.push(this.testGPSDataValidation());
    
    return results;
  }

  /**
   * G√©n√©rer rapport d'audit de s√©curit√©
   */
  async generateSecurityReport(): Promise<string> {
    const testResults = await this.runFullSecurityAudit();
    const owaspResults = owaspChecker.runFullCompliance();
    
    const passedTests = testResults.filter(r => r.passed).length;
    const criticalIssues = testResults.filter(r => r.severity === 'critical').length;
    
    let report = `# Rapport d'Audit de S√©curit√© - EcoRun\n\n`;
    report += `**Date :** ${new Date().toLocaleDateString('fr-FR')}\n`;
    report += `**Tests r√©ussis :** ${passedTests}/${testResults.length}\n`;
    report += `**Issues critiques :** ${criticalIssues}\n\n`;
    
    report += `## Conformit√© OWASP Top 10 2021\n\n`;
    owaspResults.forEach(result => {
      const status = result.compliant ? '‚úÖ' : '‚ùå';
      report += `${status} **${result.category}**\n`;
      if (result.measures.length > 0) {
        report += `   Mesures : ${result.measures.length} impl√©ment√©es\n`;
      }
      report += '\n';
    });
    
    report += `## Tests de S√©curit√© Automatis√©s\n\n`;
    testResults.forEach(result => {
      const status = result.passed ? '‚úÖ' : '‚ùå';
      const severity = result.severity.toUpperCase();
      report += `${status} **${result.test}** (${severity})\n`;
      report += `   ${result.details}\n\n`;
    });
    
    report += `## Recommandations\n\n`;
    if (criticalIssues > 0) {
      report += `‚ö†Ô∏è **${criticalIssues} issue(s) critique(s) d√©tect√©e(s) - Action imm√©diate requise**\n\n`;
    }
    
    report += `### Actions Prioritaires\n`;
    report += `1. Monitoring continu des tentatives d'acc√®s non autoris√©es\n`;
    report += `2. Tests de p√©n√©tration r√©guliers\n`;
    report += `3. Audit des d√©pendances automatis√©\n`;
    report += `4. Formation √©quipe sur s√©curit√© OWASP\n\n`;
    
    return report;
  }
}

// Instance singleton
export const securityAudit = new SecurityAuditService();

// Helper pour audit rapide
export const runSecurityAudit = async () => {
  console.log('üîí Audit de s√©curit√© en cours...');
  const results = await securityAudit.runFullSecurityAudit();
  
  const passed = results.filter(r => r.passed).length;
  const critical = results.filter(r => r.severity === 'critical').length;
  
  console.log(`‚úÖ Tests r√©ussis : ${passed}/${results.length}`);
  if (critical > 0) {
    console.log(`üö® Issues critiques : ${critical}`);
  }
  
  return results;
};